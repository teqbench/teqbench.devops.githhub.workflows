name: Common .NET Build and Test Workflow
# TeqBench - CI/CD - Common workflow to build and test a .NET repo.

on: 
  workflow_call:
    inputs:
      repository:
        description: "The respository to build and test."
        type: string
        default: ${{ github.repository }}

      repository_owner:
        description: "The respository's owner, i.e. teqbench."
        type: string
        default: ${{ github.repository_owner }}

      repository_name:
        description: "The respository's name without owner, i.e. ci-cd-workflows."
        type: string
        default: ${{ github.event.repository.name }}

      # resource_url:
      #   type: string
      #   description: "The URL of the issue/PR to get or update"
      #   default: ${{ github.event.issue.html_url || github.event.pull_request.html_url }}

      # event_number:
      #   description: "The issue/pr number the supplied resource URL is associated with to validate."
      #   type: string
      #   required: true
        
      # project_number:
      #   description: "The project number the supplied resource URL is associated with to update."
      #   type: string
      #   required: true

      project_source_folder:
        description: "The folder the project to be packaged as NuGet package is located."
        type: string
        default: './src'
        
      badges_folder:
        description: "The folder for the repo's badges."
        type: string
        default: './badges'

env:
    DOTNET_VERSION: '8.0.X'
    REPOSITORY: ${{ inputs.repository }}
    BRANCH: 'main'
    REPOSITORY_OWNER: ${{ inputs.repository_owner }}
    REPOSITORY_NAME: ${{ inputs.repository_name }}
    SRC_FOLDER: ${{ inputs.project_source_folder }}    
    BADGES_FOLDER: '${{ inputs.badges_folder }}'
    VERSION_FILE: '${{ inputs.project_source_folder }}/version.json'
    BUILD_STATUS_BADGE_FILE: '${{ inputs.badged_folder }}/build-status.svg'
    DOT_NET_VERSION: '8.0.X'
    BUILD_CONFIG: 'Release'
    RELEASE_TYPE: 'BUILD'

# The `concurrency` key ensures that only a single workflow in the same concurrency group will run at the same time. 
# For more information, see "[AUTOTITLE](/actions/using-jobs/using-concurrency)."
# `concurrency.group` generates a concurrency group name from the workflow name and repository name. 
# The `||` operator is used to define fallback values.
concurrency:
    group: '${{ github.workflow }} @ ${{ github.repository || github.head_ref || github.ref }}'

jobs:
  # merge_check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Is pull request closed and merged?
  #       if: github.event.pull_request.merged != true
  #       run: |
  #         echo "Pull request has been closed, but not merged."
  #         echo "This CI/CD workflow requires the pull request be merged in order to proceed."
  #         echo "Exiting workflow."
  #         exit 1
    
  build-and-test:
    # needs: merge_check
    runs-on: ubuntu-latest
    # needs: variables

    permissions:
      contents: write
    
    env:
      # This environment variable is implicitly required by the Setup .NET step
      NUGET_AUTH_TOKEN: ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
    steps:
    - name: Git Config
      run: |
        git config --global user.name '${{ vars.ORG_DEVOPS_GIT_CONFIG_AUTHOR }}'
        git config --global user.email '${{ vars.ORG_DEVOPS_GIT_CONFIG_EMAIL }}'    

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPOSITORY }}
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOT_NET_VERSION }}
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

    - name: Restore .NET Project Dependencies
      run: dotnet restore

    - name: Create Badges Directory If Does Not Exist
      run: mkdir -p ${{ env.BADGES_FOLDER }}

    - name: Get Current Version JSON From Version File
      id: get-version-json
      # use 'jq' to read json data from the version.json file
      # -c means to compact the output stream data instead of the default 'pretty-print' behavior
      # . is the identity operator and it copies the input of the jq processor to the output stream
      run: |
        echo "version-json=$(jq -c . ${{ env.VERSION_FILE }})" >> $GITHUB_OUTPUT

    - name: Increment Build Number
      id: increment-build-number
      uses: teqbench/version-number-components-action@v14
      with:
        # By specifying a release type of "BUILD", only the build number will be incremented.
        release-type: ${{ env.RELEASE_TYPE }}
        version-json: ${{ steps.get-version-json.outputs.version-json }}

    - name: Build Solution
      id: build-solution
      # The dotnet command would not run here using multiline; once put all on single line, ran successfully.
      # This will build ALL projects in the solution.
      run: dotnet build -c:${{ env.BUILD_CONFIG }} -p:major=${{ steps.increment-build-number.outputs.major }} -p:minor=${{ steps.increment-build-number.outputs.minor }} -p:patch=${{ steps.increment-build-number.outputs.patch }} -p:build=${{ steps.increment-build-number.outputs.build }} -p:revision=${{ steps.increment-build-number.outputs.revision }} --no-restore

    - name: Update Version File With New Build Number
      run: |
        echo "`jq '(..|.major?) = ${{ steps.increment-build-number.outputs.major }} | 
        (..|.minor?) = ${{ steps.increment-build-number.outputs.minor }} | 
        (..|.patch?) = ${{ steps.increment-build-number.outputs.patch }} | 
        (..|.build?) = ${{ steps.increment-build-number.outputs.build }} | 
        (..|.revision?) = ${{ steps.increment-build-number.outputs.revision }} 
        | (..|.suffix?) = \"${{ steps.increment-build-number.outputs.suffix }}\"' ${{ env.VERSION_FILE }}`" > ${{ env.VERSION_FILE }}
          
    - name: Commit Changes To Version File
      run: |
        git add ${{ env.VERSION_FILE }}
        git commit -m "Update to version ${{ steps.increment-build-number.outputs.version }}"
        git push

    - name: Update Build Status Badge
      id: update-build-status-badge
      uses: teqbench/badge-maker-action@v1.0.1
      with:
        badge-type: 'PASSING'
        label: 'build'
    
    - name: Save Build Status Badge
      id: save-build-status-badge
      run: echo '${{ steps.update-build-status-badge.outputs.svg }}' > '${{ env.BUILD_STATUS_BADGE_FILE }}'

    - name: Commit Changes To Build Status Badge File
      run: |
        git add '${{ env.BUILD_STATUS_BADGE_FILE }}'
        git commit -m "Update build status badge"
        git push
      
    - name: Tag & Push
      run: |
        git tag -a ${{ steps.increment-build-number.outputs.tag }} -m "Added tag ${{ steps.increment-build-number.outputs.tag }}"
        git push origin ${{ steps.increment-build-number.outputs.tag }}
              
    - name: Run Unit Tests
      id: run-unit-tests
      run: dotnet test ${{ env.SRC_FOLDER }} --no-restore --verbosity normal
