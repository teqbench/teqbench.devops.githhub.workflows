name: Common .NET Build and Test Workflow
# TeqBench - CI/CD - Common workflow to build and test a .NET repo.

on: 
  workflow_call:
    inputs:
      repository:
        description: "The respository to create a release for and, optionally, create a NuGet package for."
        type: string
        required: true

      repository_owner:
        description: "The respository's owner, i.e. teqbench."
        type: string
        required: true

      repository_name:
        description: The respository's name without owner, i.e. ci-cd-workflows.
        type: string
        required: true

      resource_url:
        type: string
        description: "The URL of the issue/PR to get or update"
        required: true

      event_number:
        description: "The issue/pr number the supplied resource URL is associated with to validate."
        type: string
        required: true
        
      project_number:
        description: "The project number the supplied resource URL is associated with to update."
        type: string
        required: true

      project_source_folder:
        description: The folder the project to be packaged as NuGet package is located.
        type: string
        required: true      

env:
    DOTNET_VERSION: '8.0.X'
    REPOSITORY: ${{ inputs.repository }}
    BRANCH: 'main'
    REPOSITORY_OWNER: ${{ inputs.repository_owner }}
    REPOSITORY_NAME: ${{ inputs.repository_name }}
    SRC_FOLDER: ${{ inputs.project_source_folder }}    
    VERSION_FILE: '${{ inputs.project_source_folder }}/version.json'
    

# The `concurrency` key ensures that only a single workflow in the same concurrency group will run at the same time. 
# For more information, see "[AUTOTITLE](/actions/using-jobs/using-concurrency)."
# `concurrency.group` generates a concurrency group name from the workflow name and repository name. 
# The `||` operator is used to define fallback values.
concurrency:
    group: '${{ github.workflow }} @ ${{ github.repository || github.head_ref || github.ref }}'

jobs:
  merge_check:
    runs-on: ubuntu-latest
    steps:
      - name: Is pull request closed and merged?
        if: github.event.pull_request.merged != true
        run: |
          echo "Pull request has been closed, but not merged."
          echo "This CI/CD workflow requires the pull request be merged in order to proceed."
          echo "Exiting workflow."
          exit 1

  build-and-test:
    needs: merge_check
    runs-on: ubuntu-latest
    # needs: variables
    env:
      BUILD_CONFIG: 'Release'
      # This environment variable is implicitly required by the Setup .NET step
      NUGET_AUTH_TOKEN: ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPOSITORY }}
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.X
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

    - name: Restore Dependencies
      run: dotnet restore

    - name: Get Current Version Number Components
      id: read-version-file
      # use 'jq' to read json data from the version.json file
      # -c means to compact the output stream data instead of the default 'pretty-print' behavior
      # . is the identity operator and it copies the input of the jq processor to the output stream
      run: |
        echo "version-json=$(jq -c . ${{ env.VERSION_FILE }})" >> $GITHUB_OUTPUT

    - name: Update Build Number
      id: get-version-number-components
      uses: teqbench/version-number-components-action@v13
      with:
        release-type: 'BUILD'
        version-json: ${{ env.VERSION_FILE }}
        
    # - name: Update Version File
    #   run: |
    #     echo "`jq '(..|.major?) = ${{ steps.get-version-number-components.outputs.major }} | 
    #     (..|.minor?) = ${{ steps.get-version-number-components.outputs.minor }} | 
    #     (..|.patch?) = ${{ steps.get-version-number-components.outputs.patch }} | 
    #     (..|.build?) = ${{ steps.get-version-number-components.outputs.build }} | 
    #     (..|.revision?) = ${{ steps.get-version-number-components.outputs.revision }} 
    #     | (..|.suffix?) = \"${{ steps.get-version-number-components.outputs.suffix }}\"' ${{ env.VERSION_FILE }}`" > ${{ env.VERSION_FILE }}

    - name: Build Solution
      id: build-solution
      # The dotnet command would not run here using multiline; once put all on single line, ran successfully.
      # This will build ALL projects in the solution.
      run: dotnet build -c:${{ env.BUILD_CONFIG }} -p:major=${{ steps.get-version-number-components.outputs.major }} -p:minor=${{ steps.get-version-number-components.outputs.minor }} -p:patch=${{ steps.get-version-number-components.outputs.patch }} -p:build=${{ steps.get-version-number-components.outputs.build }} -p:revision=${{ steps.get-version-number-components.outputs.revision }} --no-restore

    - name: Run Unit Tests
      id: run-unit-tests
      run: dotnet test ${{ env.SRC_FOLDER }} --no-restore --verbosity normal
