name: Common Create and Deploy NuGet Package Workflow
# TeqBench - CI/CD - Common workflow to create a NuGet package and deploy to the organization's package registry on GitHub.

on: 
  workflow_call:
    inputs:
      repository:
        description: "The respository to create a release for and, optionally, create a NuGet package for."
        type: string
        required: true

      repository_owner:
        description: "The respository's owner, i.e. teqbench."
        type: string
        required: true

      repository_name:
        description: The respository's name without owner, i.e. ci-cd-workflows.
        type: string
        required: true

      resource_url:
        type: string
        description: "The URL of the issue/PR to get or update"
        required: true

      event_number:
        description: "The issue/pr number the supplied resource URL is associated with to validate."
        type: string
        required: true
        
      project_number:
        description: "The project number the supplied resource URL is associated with to update."
        type: string
        required: true

      # This re-useable workflow is primarily used in conjunction with the ci-cd-create-release workflow and uses its outputs
      # to populate the follow version component inputs. Outputs however are unicode strings. So, set the type of the inputs here to string 
      # for easier support.
      major:
        description: "The major component of the version number."
        type: string
        required: true
      minor:
        description: "The minor component of the version number."
        type: string
        required: true
      patch:
        description: "The patch component of the version number."
        type: string
        required: true
      build:
        description: "The build component of the version number."
        type: string
        required: true
      revision:
        description: "The revision component of the version number."
        type: string
        required: true
      release_tag:
        description: "The version number in 'vMajor.Minor.Build.Revision' format."
        type: string
        required: true

    outputs:
      status:
        description: 'Workflow status.'
        value: ${{ jobs.create-package.outputs.status }}
        
env:
  PROJECT_URL: 'https://github.com/orgs/teqbench/projects/${{ inputs.project_number }}'
  EVENT_NUMBER: ${{ inputs.event_number }}
  RESOURCE_URL: ${{ inputs.resource_url }}
  REPOSITORY: ${{ inputs.repository }}
  REPOSITORY_OWNER: ${{ inputs.repository_owner }}
  REPOSITORY_NAME: ${{ inputs.repository_name }}  
  MAJOR: ${{ inputs.major }}
  MINOR: ${{ inputs.minor }}
  PATCH: ${{ inputs.patch }}
  BUILD: ${{ inputs.build }}
  REVISION: ${{ inputs.revision }}
  RELEASE_TAG: ${{ inputs.release_tag }}

jobs:
  merge_check:
    runs-on: ubuntu-latest
    steps:
      - name: Is pull request closed and merged?
        if: github.event.pull_request.merged != true
        run: |
          echo "Pull request has been closed, but not merged."
          echo "This CI/CD workflow requires the pull request be merged in order to proceed."
          echo "Exiting workflow."
          exit 1

  variables:
    needs: merge_check
    runs-on: ubuntu-latest
    steps:
      - name: Get Mergable Field Value
        id: get_mergable_field_value
        uses: teqbench/project-fields@v2.1
        with:
          operation: get
          fields: Mergable
          github_token: ${{ secrets.DEVOPS_PROJECT_READER_TOKEN }}
          project_url: ${{ env.PROJECT_URL }}
          resource_url: ${{ env.RESOURCE_URL }}
          
      - name: Get Release Type Field Value
        id: get_release_type_field_value
        uses: teqbench/project-fields@v2.1
        with:
          operation: get
          fields: Release Type
          github_token: ${{ secrets.DEVOPS_PROJECT_READER_TOKEN }}
          project_url: ${{ env.PROJECT_URL }}
          resource_url: ${{ env.RESOURCE_URL }}
          
      - name: Assign Field Values To Variables
        id: assign_field_values_to_variables
        run: |
          echo "mergable_value=${{ steps.get_mergable_field_value.outputs.values }}" >> $GITHUB_OUTPUT
          # echo "release_type_value=${{ steps.get_release_type_field_value.outputs.values }}" >> $GITHUB_OUTPUT
          
    outputs:
      mergable: ${{ steps.assign_field_values_to_variables.outputs.mergable_value }}

  create-package:
    runs-on: ubuntu-latest
    needs: variables
    env:
      BUILD_CONFIG: 'Release'
      # This environment variable is implicitly required by the Setup .NET step
      NUGET_AUTH_TOKEN: ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
    if: ${{ contains(needs.variables.outputs.mergable, vars.ORG_OPTION_MERGABLE_PR_MERGE_RELEASE_DEPLOY) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}
              
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.X
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        # The dotnet command would not run here using multiline; once put all on single line, ran successfully.
        run: dotnet build -c:${{ env.BUILD_CONFIG }} -p:major=${{ env.MAJOR }} -p:minor=${{ env.MINOR }} -p:patch=${{ env.PATCH }} -p:build=${{ env.BUILD }} -p:revision=${{ env.REVISION }} --no-restore

      - name: Create Package
        # The dotnet command would not run here using multiline; once put all on single line, ran successfully.
        run: dotnet pack -c:${{ env.BUILD_CONFIG }} -p:major=${{ env.MAJOR }} -p:minor=${{ env.MINOR }} -p:patch=${{ env.PATCH }} -p:build=${{ env.BUILD }} -p:revision=${{ env.REVISION }} --no-build
      
      - name: Publish Package
        # The token, DEVOPS_PACKAGE_PUBLISHER_TOKEN, belongs to the devops-teqbench-com user and has repo/packages:write scope
        # however, publishing appears to only work when the owner of the supplied town is also assigned the 'owner' role
        # within the GitHub organzation which own's the repo being packaged/published.
        run: dotnet nuget push bin/Release/*.nupkg --skip-duplicate --api-key ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}

      - name: Assign publish label
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ env.EVENT_NUMBER }},
              owner: "${{ env.REPOSITORY_OWNER }}",
              repo: "${{ env.REPOSITORY_NAME }}",
              labels: ["Published-NuGet-${{ env.RELEASE_TAG }}"]
            })

    outputs:
      status: success()
            
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: create-package
    steps:
      - name: Update Status field for pull request
        if: success()
        uses: teqbench/project-fields@v2.1
        with:
          operation: set
          fields: Status
          github_token: ${{ secrets.DEVOPS_PROJECT_WRITER_TOKEN }}
          project_url: ${{ env.PROJECT_URL }}
          values: ${{ vars.ORG_OPTION_STATUS_DONE }}
          
      - name: Update Status field for pull request
        if: failure()
        uses: teqbench/project-fields@v2.1
        with:
          operation: set
          fields: Status
          github_token: ${{ secrets.DEVOPS_PROJECT_WRITER_TOKEN }}
          project_url: ${{ env.PROJECT_URL }}
          values: ${{ vars.ORG_OPTION_STATUS_PR_FAILURE }}
