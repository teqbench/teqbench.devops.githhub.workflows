name: Shared Release & Deploy Workflow

on: 
  workflow_call:
    inputs:
      repository:
        description: "The respository to build and test."
        type: string
        default: ${{ github.repository }}

      repository_owner:
        description: "The respository's owner, i.e. teqbench."
        type: string
        default: ${{ github.repository_owner }}
      
      release_type:
        description: "Release type to perform. Options MAJOR, MINOR, PATCH if CI type is build-release or build-release-deploy, BUILD if CI type is build-ci or build-manual."
        type: string
        default: 'BUILD'

      coverage_lower_boundary_override:
        description: "The lower coverage boundary (inclusive); a code coverage less than this value is a failing build, if code coverage is greater than or equal to (and all other required build steps are successful) build is passing. Must be less than or equal to the upper coverage boundary (75)."
        type: number
        default: 60

      project_source_folder:
        description: "The folder the project to be packaged as NuGet package is located. Default setting: './src'"
        type: string
        default: './src'
        
      badges_folder:
        description: "The folder for the repo's badges. Default setting: './.badges'"
        type: string
        default: './.badges'
      
      coverage_folder:
        description: "The folder for the repo's coverage data and reports Default setting: './coverage'"
        type: string
        default: './.coverage'

      bypass_tests:
        description: "Option to bypass/skip the unit test step. Only should be used if repo does NOT contact test as often is case with experimental/sandbox/POC codebases."
        type: boolean
        default: false
  
      deploy:
        description: "Option to deploy. Only should be used if repo should not be deployed as in case of experimental/sandbox/POC codebases."
        type: boolean
        default: true        

env:
  # Env vars based on input values
  # NOTE: When assign to 'env' context variables, values are assigned as strings, and as such, when evaluating the variable
  # need to evaluate as a string or covert to appropriate type (i.e. to a number). If boolean, can compare to 'true' or 'false' 
  # strings, i.e. env.boolean_string_variable == 'true' as opposed to inputs.boolean_variable (which is a boolean)
  INPUT_BUILD_CONFIG_REPOSITORY: ${{ inputs.repository }}
  INPUT_BUILD_CONFIG_REPOSITORY_OWNER: ${{ inputs.repository_owner }}
  INPUT_FOLDER_PATH_SOURCE: ${{ inputs.project_source_folder }}    
  
  # Env vars without input var values.
  BUILD_CONFIG_DOTNET_VERSION: '8.0.X'
  BUILD_CONFIG_NAME: 'Release'
  BUILD_CONFIG_BRANCH: 'main'
  BUILD_CONFIG_PACKAGE_PUBLISH_FOLDER: './publish'
  OUTCOME_SUCCESS: 'success'
  BOOLEAN_TRUE: 'true'
  BOOLEAN_FALSE: 'false'

# The `concurrency` key ensures that only a single workflow in the same concurrency group will run at the same time.
# For more information, see "[AUTOTITLE](/actions/using-jobs/using-concurrency)."
# `concurrency.group` generates a concurrency group name from the workflow name and repository name.
# The `||` operator is used to define fallback values.
concurrency:
  # Only allow one workflow to run one at a time for a repo to keep things simple.
  # There's not that much traffic so to queue workflows up is no big deal.
  group: ${{ github.repository }}

jobs:
  # Build and test, outputs version info, coverage info using shared build workflow.
  build:
    name: Build Job
    uses: teqbench/teqbench.devops.githhub.workflows/.github/workflows/build.yml@main
    secrets: inherit
    with:
      repository: ${{ inputs.repository }}
      repository_owner: ${{ inputs.repository_owner }}
      ci_type: 'build-release-deploy'
      release_type: ${{ inputs.release_type }}
      coverage_lower_boundary_override: ${{ inputs.coverage_lower_boundary_override }}
      project_source_folder: ${{ inputs.project_source_folder }}
      badges_folder: ${{ inputs.badges_folder }}
      coverage_folder: ${{ inputs.coverage_folder }}
      bypass_tests: ${{ inputs.bypass_tests }}
      
  # Creates release based on the build.
  release:
    name: Release Job
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Git Config
      run: |
        git config --global user.name '${{ vars.ORG_DEVOPS_GIT_CONFIG_AUTHOR }}'
        git config --global user.email '${{ vars.ORG_DEVOPS_GIT_CONFIG_EMAIL }}' 
        echo "needs.build.outputs.status = '${{ needs.build.outputs.status }}'"
        
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.INPUT_BUILD_CONFIG_REPOSITORY }}
        ref: ${{ env.BUILD_CONFIG_BRANCH }}
        submodules: recursive
        token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}

    - name: Tag & Push Release
      id: tag-push
      if: ${{ needs.build.outputs.status == env.OUTCOME_SUCCESS }}
      run: |
        git tag -a ${{ needs.build.outputs.tag }} -m "Added tag ${{ needs.build.outputs.tag }}." ${{ needs.build.outputs.version_commit_hash }}
        git push origin ${{ needs.build.outputs.tag }}
        
    - name: Create Release With Generated Notes
      id: create
      if: ${{ steps.tag-push.outcome == env.OUTCOME_SUCCESS }}
      run: gh release create ${{ needs.build.outputs.tag }} --generate-notes --repo ${{ env.INPUT_BUILD_CONFIG_REPOSITORY }}
      env:
        GITHUB_TOKEN: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}
    
    # If the tag/push and create steps have any outcomes other that success, fail the release and prevent deployment.
    - name: Fail Release?
      if: ${{ steps.tag-push.outcome != env.OUTCOME_SUCCESS && steps.create.outcome != env.OUTCOME_SUCCESS }}
      run: |
        echo "The 'tag-push' and 'create' steps of the 'release' job are both required to have an outcome of '${{ env.OUTCOME_SUCCESS }}' for the release to be successful and the worklow to proceed."
        echo "steps.tag-push.outcome == '${{ steps.tag-push.outcome }}'
        echo "steps.create.outcome == '${{ steps.create.outcome }}'
        echo "Fail job."
        exit 1

  # validate_deploy:
  #   name: Validate Deploy Variable
  #   runs-on: ubuntu-latest
  #   needs: [build, release]
  #   steps:
  #   - name: What is var
  #     run: |
  #       echo "inputs.deploy ${{ fromJSON(inputs.deploy) }}"
        
  # Creates deployment based on release.
  deploy:    
    name: Deploy Job
    runs-on: ubuntu-latest
    needs: [build, release]
    # 'env' context is not available to jobs.<job id>.if, so use 'inputs' context which is availabe to jobs.<job id>.if
    # see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability 
    # Also, note, since evaluating the input variable, it's still a boolean whereas when assign to an environment 
    # variable, it's converted to a string and have to evaluate as a string.
    if: ${{ inputs.deploy }}
    env:
      # This environment variable is implicitly required by the Setup .NET step
      NUGET_AUTH_TOKEN: ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.INPUT_BUILD_CONFIG_REPOSITORY }}
        ref: ${{ needs.build.outputs.tag }}
        submodules: recursive
        token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.BUILD_CONFIG_DOTNET_VERSION }}
        source-url: https://nuget.pkg.github.com/${{ env.INPUT_BUILD_CONFIG_REPOSITORY_OWNER }}/index.json
  
    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Solution
      # This will build ALL projects in the solution.
      run: dotnet build -c:${{ env.BUILD_CONFIG_NAME }} -p:major=${{ needs.build.outputs.major }} -p:minor=${{ needs.build.outputs.minor }} -p:patch=${{ needs.build.outputs.patch }} -p:build=${{ needs.build.outputs.build }} -p:revision=${{ needs.build.outputs.revision }} --no-restore

    - name: Create Package
      id: create-package
      run: dotnet pack ${{ env.INPUT_FOLDER_PATH_SOURCE }} -c:${{ env.BUILD_CONFIG_NAME }} -p:major=${{ needs.build.outputs.major }} -p:minor=${{ needs.build.outputs.minor }} -p:patch=${{ needs.build.outputs.patch }} -p:build=${{ needs.build.outputs.build }} -p:revision=${{ needs.build.outputs.revision }} -o ${{ env.BUILD_CONFIG_PACKAGE_PUBLISH_FOLDER }}  --no-build
    
    - name: Publish Package
      if: ${{ steps.create-package.outcome == env.OUTCOME_SUCCESS }}
      # The token, DEVOPS_PACKAGE_PUBLISHER_TOKEN, belongs to the devops-teqbench-com user and has repo/packages:write scope
      # however, publishing appears to only work when the owner of the supplied town is also assigned the 'owner' role
      # within the GitHub organzation which own's the repo being packaged/published.
      run: dotnet nuget push ${{ env.BUILD_CONFIG_PACKAGE_PUBLISH_FOLDER }}/*.nupkg --skip-duplicate --api-key ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
