name: .NET Build and Test Workflow WITHOUT Concurrency Protection
# TeqBench - Shared workflow to build and test a .NET repo WITHOUT concurrency protection. Use case, to be called from another workflow that 
# has concurrency protection either at the workflow level or the job level.

on: 
  workflow_call:
    inputs:
      repository:
        description: "The respository to build and test."
        type: string
        default: ${{ github.repository }}

      repository_owner:
        description: "The respository's owner, i.e. teqbench."
        type: string
        default: ${{ github.repository_owner }}

      ci_type:
        description: "CI type to perform; build-manual, build-ci, build-release, build-release-deploy. Default setting: 'build-ci'"
        type: string
        default: 'build-ci'
      
      release_type:
        description: "Release type to perform. Options MAJOR, MINOR, PATCH if CI type is build-release or build-release-deploy, BUILD if CI type is build-ci or build-manual."
        type: string
        default: 'BUILD'

      coverage_lower_boundary_override:
        description: "The lower coverage boundary (inclusive); a code coverage less than this value is a failing build, if code coverage is greater than or equal to (and all other required build steps are successful) build is passing. Must be less than or equal to the upper coverage boundary (75)."
        type: number
        default: 60

      project_source_folder:
        description: "The folder the project to be packaged as NuGet package is located. Default setting: './src'"
        type: string
        default: './src'
        
      badges_folder:
        description: "The folder for the repo's badges. Default setting: './.badges'"
        type: string
        default: './.badges'
      
      coverage_folder:
        description: "The folder for the repo's coverage data and reports Default setting: './coverage'"
        type: string
        default: './.coverage'

    # NOTE: Job outputs are unicode strings, and cannot specify the type for workflow outputs. So,
    # here, since returning job outputs, the return types are strings.
    outputs:
      status:
        description: 'Workflow status.'
        value: ${{ jobs.build.outputs.status }}
      major:
        description: 'The major component of the version number.'
        value: ${{ jobs.build.outputs.major }}
      minor:
        description: 'The minor component of the version number.'
        value: ${{ jobs.build.outputs.minor }}
      patch:
        description: 'The patch component of the version number.'
        value: ${{ jobs.build.outputs.patch }}
      build:
        description: 'The build component of the version number.'
        value: ${{ jobs.build.outputs.build }}
      revision:
        description: 'The revision component of the version number.'
        value: ${{ jobs.build.outputs.revision }}
      tag:
        description: "The version number in 'vMajor.Minor.Build.Revision' format."
        value: ${{ jobs.build.outputs.tag }}
      version_commit_hash:
        value: ${{ jobs.build.outputs.version_commit_hash }}
        
env:
  # Env vars based on input values
  INPUT_CI_TYPE: ${{ inputs.ci_type }}
  INPUT_BUILD_CONFIG_REPOSITORY: ${{ inputs.repository }}
  INPUT_BUILD_CONFIG_REPOSITORY_OWNER: ${{ inputs.repository_owner }}
  INPUT_FOLDER_PATH_SOURCE: ${{ inputs.project_source_folder }}    
  INPUT_FOLDER_PATH_BADGES: '${{ inputs.badges_folder }}'
  INPUT_FOLDER_PATH_COVERAGE: '${{ inputs.coverage_folder }}'
  INPUT_FILE_PATH_VERSION: '${{ inputs.project_source_folder }}/version.json'    
  INPUT_FILE_PATH_BADGE_BUILD_STATUS: '${{ inputs.badges_folder }}/build-status.svg'
  INPUT_FILE_PATH_BADGE_BUILD_NUMBER: '${{ inputs.badges_folder }}/build-number.svg'
  INPUT_FILE_PATH_BADGE_COVERAGE: '${{ inputs.badges_folder }}/code-coverage.svg'
  INPUT_FILE_PATH_BADGE_RELEASE_DATE: '${{ inputs.badges_folder }}/release-date.svg'
  INPUT_FILE_PATH_BADGE_RELEASE_TAG: '${{ inputs.badges_folder }}/release-tag.svg'
  INPUT_FILE_PATH_BADGE_DEPLOY_DATE: '${{ inputs.badges_folder }}/deploy-date.svg'
  INPUT_FILE_PATH_BADGE_DEPLOY_VERSION: '${{ inputs.badges_folder }}/deploy-version.svg'
  INPUT_COVERAGE_LOWER_BOUNDARY_OVERRIDE: ${{ inputs.coverage_lower_boundary_override }}
  INPUT_RELEASE_TYPE: ${{ inputs.release_type }}

  # Env vars without input var values.
  BUILD_CONFIG_DOTNET_VERSION: '8.0.X'
  BUILD_CONFIG_NAME: 'Release'
  BUILD_CONFIG_BRANCH: 'main'
  BADGE_TYPE_INFORMATION: 'INFORMATION'
  BADGE_TYPE_WARNING: 'WARNING'
  BADGE_TYPE_SUCCESS: 'SUCCESS'
  BADGE_TYPE_FAILURE: 'FAILURE'
  BADGE_TYPE_PASSING: 'PASSING'
  BADGE_TYPE_FAILING: 'FAILING'
  BADGE_TYPE_DATESTAMP: 'DATESTAMP'
  BADGE_LABEL_BUILD: 'build'
  BADGE_LABEL_BUILD_NUMBER: 'build #'
  BADGE_LABEL_COVERAGE: 'coverage'
  CI_TYPE_OPTION_BUILD_CI: 'build-ci'
  CI_TYPE_OPTION_BUILD_MANUAL: 'build-manual'
  CI_TYPE_OPTION_BUILD_RELEASE: 'build-release'
  CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY: 'build-release-deploy'
  RELEASE_TYPE_OPTION_MAJOR: 'MAJOR'
  RELEASE_TYPE_OPTION_MINOR: 'MINOR'
  RELEASE_TYPE_OPTION_BUILD: 'BUILD'
  RELEASE_TYPE_OPTION_PATCH: 'PATCH'
  COVERAGE_UPPER_BOUNDARY: 75
  OUTCOME_SUCCESS: 'success'
  GIT_STATUS_NOTHING_TO_COMMIT: 'nothing to commit'
  BOOLEAN_TRUE: 'true'
  BOOLEAN_FALSE: 'false'

jobs:
  validate-ci-type:
    name: Validate CI Type
    runs-on: ubuntu-latest
    steps: 
    - name: Validate
      # CI_TYPE_OPTION_BUILD_CI - PR merge is required in order to perform build.
      # CI_TYPE_OPTION_BUILD_MANUAL - PR merge is NOT required in order to perform build.
      # CI_TYPE_OPTION_BUILD_RELEASE - PR merge is TBD required in order to perform build.
      # CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY - PR merge is TBD required in order to perform build.
      if: ${{ 
        env.INPUT_CI_TYPE != env.CI_TYPE_OPTION_BUILD_CI && 
        env.INPUT_CI_TYPE != env.CI_TYPE_OPTION_BUILD_MANUAL && 
        env.INPUT_CI_TYPE != env.CI_TYPE_OPTION_BUILD_RELEASE &&
        env.INPUT_CI_TYPE != env.CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY
        }}
      run: |
        echo "Specified CI Type, '${{ env.INPUT_CI_TYPE }}', is not valid."
        echo "Valid options are: ${{ env.CI_TYPE_OPTION_BUILD_CI }}, ${{ env.CI_TYPE_OPTION_BUILD_MANUAL }}, ${{ env.CI_TYPE_OPTION_BUILD_RELEASE }}, ${{ env.CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY }}"
        echo "Exiting workflow."
        exit 1

  validate-release-type:
    name: Validate Release Type
    runs-on: ubuntu-latest
    needs: validate-ci-type
    steps:
    - name: Validate
      # For CI Types CI_TYPE_OPTION_BUILD_RELEASE and CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY valid release types are:
      # RELEASE_TYPE_OPTION_MAJOR - Backwards-incompatible updates and/or bugfixes
      # RELEASE_TYPE_OPTION_MINOR - Backwards-compatible updates and bugfixes
      # RELEASE_TYPE_OPTION_PATCH - Backwards-compatible bugfixes - ONLY
      # For CI Types CI_TYPE_OPTION_BUILD_CI and CI_TYPE_OPTION_BUILD_MANUAL valid release types are:
      # RELEASE_TYPE_OPTION_BUILD
      if: ${{ 
        (
          (env.INPUT_CI_TYPE == env.CI_TYPE_OPTION_BUILD_RELEASE || env.INPUT_CI_TYPE == env.CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY) && 
          (env.INPUT_RELEASE_TYPE != env.RELEASE_TYPE_OPTION_MAJOR && env.INPUT_RELEASE_TYPE != env.RELEASE_TYPE_OPTION_MINOR && env.INPUT_RELEASE_TYPE != env.RELEASE_TYPE_OPTION_PATCH)
        ) || 
        (
          (env.INPUT_CI_TYPE == env.CI_TYPE_OPTION_BUILD_MANUAL || env.INPUT_CI_TYPE == env.CI_TYPE_OPTION_BUILD_CI) && 
          (env.INPUT_RELEASE_TYPE != env.RELEASE_TYPE_OPTION_BUILD)
        ) }}
      run: |
        echo "Specified Release Type, '${{ env.INPUT_RELEASE_TYPE }}', is not valid for the supplied CI Type, '${{ env.INPUT_CI_TYPE }}'."
        echo "Valid options are: ${{ env.RELEASE_TYPE_OPTION_MAJOR }}, ${{ env.RELEASE_TYPE_OPTION_MINOR }}, ${{ env.RELEASE_TYPE_OPTION_PATCH }} for CI types ${{ env.CI_TYPE_OPTION_BUILD_RELEASE }} and ${{ env.CI_TYPE_OPTION_BUILD_RELEASE_DEPLOY }}, otherwise ${{ env.RELEASE_TYPE_OPTION_BUILD }} is valid for CI types ${{ env.CI_TYPE_OPTION_BUILD_MANUAL }} or ${{ env.CI_TYPE_OPTION_BUILD_CI }}"
        echo "Exiting workflow."
        exit 1
      
  validate-merge:
    name: Validate PR Merge
    runs-on: ubuntu-latest
    needs: [validate-ci-type, validate-release-type]
    steps:
      - name: Validate
        if: (github.event.pull_request.merged != true) && (env.INPUT_CI_TYPE == env.CI_TYPE_OPTION_BUILD_CI)
        run: |
          echo "Pull request has been closed, but not merged."
          echo "This CI/CD workflow (i.e. '${{ env.INPUT_CI_TYPE }}') requires a pull request and it be merged in order to proceed."
          echo "Exiting workflow."
          exit 1

  validate-variables: 
    name: Validate Variables
    runs-on: ubuntu-latest
    steps:
      - name: Validate Lower Coverage Boundary Override
        id: validate-lower-coverage-boundary-override
        run: |
          echo "value=${{ (fromJSON(env.INPUT_COVERAGE_LOWER_BOUNDARY_OVERRIDE) < 0) && 0 || ((fromJSON(env.INPUT_COVERAGE_LOWER_BOUNDARY_OVERRIDE) > fromJSON(env.COVERAGE_UPPER_BOUNDARY)) && env.COVERAGE_UPPER_BOUNDARY || env.INPUT_COVERAGE_LOWER_BOUNDARY_OVERRIDE) }}" >> $GITHUB_OUTPUT
    outputs:
      COVERAGE_LOWER_BOUNDARY_OVERRIDE: ${{ steps.validate-lower-coverage-boundary-override.outputs.value }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [validate-ci-type, validate-release-type, validate-variables, validate-merge]

    permissions:
      contents: write
    
    env:
      # This environment variable is implicitly required by the Setup .NET step
      NUGET_AUTH_TOKEN: ${{secrets.DEVOPS_PACKAGE_PUBLISHER_TOKEN}}
    steps:
    - name: Git Config
      run: |
        git config --global user.name '${{ vars.ORG_DEVOPS_GIT_CONFIG_AUTHOR }}'
        git config --global user.email '${{ vars.ORG_DEVOPS_GIT_CONFIG_EMAIL }}'    

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.INPUT_BUILD_CONFIG_REPOSITORY }}
        ref: ${{ env.BUILD_CONFIG_BRANCH }}
        submodules: recursive
        token: ${{ secrets.DEVOPS_ACTIONS_PAT_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.BUILD_CONFIG_DOTNET_VERSION }}
        source-url: https://nuget.pkg.github.com/${{ env.INPUT_BUILD_CONFIG_REPOSITORY_OWNER }}/index.json

    - name: Get Current Version JSON From Version File
      id: get-version-json
      # use 'jq' to read json data from the version.json file
      # -c means to compact the output stream data instead of the default 'pretty-print' behavior
      # . is the identity operator and it copies the input of the jq processor to the output stream
      run: |
        echo "version-json=$(jq -c . ${{ env.INPUT_FILE_PATH_VERSION }})" >> $GITHUB_OUTPUT

    # Increment the build number BEFORE building the solution so have the updated version number components to pass as parameters.
    - name: Increment Version Number
      id: increment-version-number
      uses: teqbench/teqbench.devops.githhub.actions.version-updater@v14
      with:
        release-type: ${{ env.INPUT_RELEASE_TYPE }}
        version-json: ${{ steps.get-version-json.outputs.version-json }}

    # Always update the version file with new build number, even if build fails, and if the increment build number step was successful.
    - name: Update Version File With New Build Number
      if: ${{ steps.increment-version-number.outcome == env.OUTCOME_SUCCESS }}
      id: update-version-file
      run: |
        echo "`jq '(..|.major?) = ${{ steps.increment-version-number.outputs.major }} | 
        (..|.minor?) = ${{ steps.increment-version-number.outputs.minor }} | 
        (..|.patch?) = ${{ steps.increment-version-number.outputs.patch }} | 
        (..|.build?) = ${{ steps.increment-version-number.outputs.build }} | 
        (..|.revision?) = ${{ steps.increment-version-number.outputs.revision }} 
        | (..|.suffix?) = \"${{ steps.increment-version-number.outputs.suffix }}\"' ${{ env.INPUT_FILE_PATH_VERSION }}`" > ${{ env.INPUT_FILE_PATH_VERSION }}

    - name: Restore .NET Project Dependencies
      run: dotnet restore
  
    - name: Build Solution
      id: build-solution
      # The dotnet command would not run here using multiline; once put all on single line, ran successfully.
      # This will build ALL projects in the solution.
      run: dotnet build -c:${{ env.BUILD_CONFIG_NAME }} -p:major=${{ steps.increment-version-number.outputs.major }} -p:minor=${{ steps.increment-version-number.outputs.minor }} -p:patch=${{ steps.increment-version-number.outputs.patch }} -p:build=${{ steps.increment-version-number.outputs.build }} -p:revision=${{ steps.increment-version-number.outputs.revision }} --no-restore

    # Only run unit tests if all prior steps, including the Build Solution step, were successful.
    - name: Run Unit Tests
      id: run-unit-tests
      run: dotnet test --no-restore

    - name: Create Badges Directory If Does Not Exist
      if: ${{ always() }}
      run: mkdir -p ${{ env.INPUT_FOLDER_PATH_BADGES }}
      
    # Commit version file changes and badge file changes separately. This is to be able to use the updated build #
    # from the updated version to create a badge, but ONLY if both incrementing the version number and committing
    # the version file changes were BOTH successful.
    - name: Update Build Number Badge
      id: update-build-number-badge
      if: ${{ always() && (steps.increment-version-number.outcome == env.OUTCOME_SUCCESS)}}
      uses: teqbench/teqbench.devops.githhub.actions.badge-maker@v1.0.2
      with:
        badge-type: ${{ env.BADGE_TYPE_INFORMATION }}
        label: ${{ env.BADGE_LABEL_BUILD_NUMBER }}
        message: ${{ (steps.increment-version-number.outcome == env.OUTCOME_SUCCESS) && steps.increment-version-number.outputs.build || 'N/A' }}

    - name: Save Build Number Badge File
      id: save-build-number-badge-file
      if: ${{ always() && (steps.update-build-number-badge.outcome == env.OUTCOME_SUCCESS) }}
      run: echo '${{ steps.update-build-number-badge.outputs.svg }}' > '${{ env.INPUT_FILE_PATH_BADGE_BUILD_NUMBER }}'

    # Read coverage XML from file
    - name: Read Coverage File
      id: read-coverage-file
      if: ${{ steps.run-unit-tests.outcome == env.OUTCOME_SUCCESS }}
      run: |
        echo xml=$(<${{ env.INPUT_FOLDER_PATH_COVERAGE }}/coverage.cobertura.xml) >> $GITHUB_OUTPUT

    # Pass coverage XML to action to get coverage %
    - name: Get Coverage Value
      id: get-coverage-value
      if: ${{ (steps.run-unit-tests.outcome == env.OUTCOME_SUCCESS) && (steps.read-coverage-file.outcome == env.OUTCOME_SUCCESS) }}
      uses: teqbench/teqbench.devops.githhub.actions.coverage-reader@v2.0.1
      with:
        coverage-xml: '${{ steps.read-coverage-file.outputs.xml }}'

    # coverage >=75.0 success
    # coverage >= 60 and coverage < 75.0 warning
    # coverage < 60 failing
    - name: Determine Coverage Badge Type
      id: determine-coverage-badge-type
      # To get numeric values to compare as numbers, have to use fromJSON to force the comparison as numbers; apparently this is bug/issue in GitHub Actions as of 12/31/23.
      run: |
        echo "badge-type=${{ (((steps.get-coverage-value.outcome == env.OUTCOME_SUCCESS) && (fromJSON(steps.get-coverage-value.outputs.coverage) >= fromJSON(env.COVERAGE_UPPER_BOUNDARY)) && env.BADGE_TYPE_SUCCESS) || (((steps.get-coverage-value.outcome == env.OUTCOME_SUCCESS) && (fromJSON(steps.get-coverage-value.outputs.coverage) < fromJSON(needs.validate-variables.outputs.COVERAGE_LOWER_BOUNDARY_OVERRIDE)) && env.BADGE_TYPE_FAILURE) || ((steps.get-coverage-value.outcome == env.OUTCOME_SUCCESS) && env.BADGE_TYPE_WARNING))) || env.BADGE_TYPE_FAILURE }}" >> $GITHUB_OUTPUT

    - name: Update Coverage Badge
      id: update-coverage-badge
      uses: teqbench/teqbench.devops.githhub.actions.badge-maker@v1.0.2
      with:
        badge-type: ${{ (steps.determine-coverage-badge-type.outcome == env.OUTCOME_SUCCESS) && steps.determine-coverage-badge-type.outputs.badge-type || env.BADGE_TYPE_FAILURE }}
        label: ${{ env.BADGE_LABEL_COVERAGE }}
        message: ${{ format('{0}', (steps.get-coverage-value.outcome == env.OUTCOME_SUCCESS) && steps.get-coverage-value.outputs.coverage-foratted || '0%') }}

    - name: Save Coverage Badge File
      id: save-coverage-badge-file
      if: ${{ steps.update-coverage-badge.outcome == env.OUTCOME_SUCCESS }}
      run: echo '${{ steps.update-coverage-badge.outputs.svg }}' > '${{ env.INPUT_FILE_PATH_BADGE_COVERAGE }}'
    
    - name: Is Coverage Acceptable?
      id: is-coverage-acceptable
      if: ${{ fromJSON(steps.get-coverage-value.outputs.coverage) >= fromJSON(needs.validate-variables.outputs.COVERAGE_LOWER_BOUNDARY_OVERRIDE) }}
      run: exit 0

    # Cannot eval success() outside of if statement, so use build-status step to get overall build status to 
    # help determine the badge type for the build.
    - name: Build Status
      id: build-status
      if: ${{ always() && success() }}
      run: exit 0

    # If all previous steps successful AND the coverage is greater than or eqaul to the lower coverage boundary, 
    # then the build is considered to be passing.
    - name: Update Build Status Badge
      id: update-build-status-badge
      if: ${{ always() }}
      uses: teqbench/teqbench.devops.githhub.actions.badge-maker@v1.0.2
      with:
        # badge-type: ${{ ((steps.build-status.outcome == env.OUTCOME_SUCCESS) && (fromJSON(steps.get-coverage-value.outputs.coverage) >= fromJSON(needs.validate-variables.outputs.COVERAGE_LOWER_BOUNDARY_OVERRIDE))) && env.BADGE_TYPE_PASSING || env.BADGE_TYPE_FAILING }}
        badge-type: ${{ ((steps.build-status.outcome == env.OUTCOME_SUCCESS) && (steps.is-coverage-acceptable.outcome == env.OUTCOME_SUCCESS)) && env.BADGE_TYPE_PASSING || env.BADGE_TYPE_FAILING }}
        label: ${{ env.BADGE_LABEL_BUILD }}
  
    - name: Save Build Status Badge File
      id: save-build-status-badge-file
      if: ${{ always() }}
      run: echo '${{ steps.update-build-status-badge.outputs.svg }}' > '${{ env.INPUT_FILE_PATH_BADGE_BUILD_STATUS }}'

    # The version.json and at least one badge file (i.e. the build badge) should have been modified.
    - name: Check For Files To Commit
      id: git-status
      if: ${{ always() }}
      run: echo "modified=$(if git status | grep '${{ env.GIT_STATUS_NOTHING_TO_COMMIT }}'; then echo '${{ env.BOOLEAN_FALSE }}'; else echo '${{ env.BOOLEAN_TRUE }}'; fi)" >> $GITHUB_OUTPUT

    - name: Commit Files Changes
      id: commit-files-changes
      if: ${{ always() && (steps.git-status.outputs.modified == env.BOOLEAN_TRUE) }}
      # Add all changed files (any file modifications, additions, deletions) to stage.
      # Commit and get the hash.
      run: |
        git add -A
        git commit -m "Update to version ${{ steps.increment-version-number.outputs.version }}"
        echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
    # ONLY tag and push commits when all prior steps (which were not skipped) ran succesfully and 
    # when steps which committed changes to the version file and badge files ran succesffully.
    # Even if the coverage is assessment step (i.e. is-coverage-acceptable) was not successful, do want to push changes
    # to the version and badge files. 
    - name: Push Commits
      id: push-commits
      if: ${{ always() && (steps.commit-files-changes.outcome == env.OUTCOME_SUCCESS) }}
      run: |
        git push

    # If the coverage is assessment step (i.e. is-coverage-acceptable) was not successful OR if the pushing of any commits was not successful, build fails.
    - name: Fail This Build?
      if: (steps.is-coverage-acceptable.outcome != env.OUTCOME_SUCCESS) || (steps.push-commits.outcome != env.OUTCOME_SUCCESS)
      run: exit 1
      
    outputs:
      status: success()
      major: ${{ steps.increment-version-number.outputs.major }}
      minor: ${{ steps.increment-version-number.outputs.minor }}
      patch: ${{ steps.increment-version-number.outputs.patch }}
      build: ${{ steps.increment-version-number.outputs.build }}
      revision: ${{ steps.increment-version-number.outputs.revision }}
      tag: ${{ steps.increment-version-number.outputs.tag }}
      version_commit_hash: ${{ steps.commit-files-changes.outputs.hash }}
